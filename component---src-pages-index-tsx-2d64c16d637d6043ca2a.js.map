{"version":3,"file":"component---src-pages-index-tsx-2d64c16d637d6043ca2a.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/categories.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Categories = ({ data, onChangeCategory, filteredCategory }) => {\n  const group = data.allMdx.nodes\n  const categorySet: Set<string> = new Set()\n  group.forEach(prop => {\n    categorySet.add(prop.frontmatter.categories)\n  });\n\n  const clickHandler = (event) => {\n    onChangeCategory(event.target.innerText)\n  }\n  return (\n    <div className=\"category-wrapper\">\n      <hr/>\n      <h2>Categories</h2>\n      <ol className=\"category-box\">\n        <li\n          key={\"All\"}\n          className=\"categories\"\n          onClick={clickHandler}\n          onKeyPress={clickHandler}\n          role=\"presentation\"\n          is-selected={(`All` === filteredCategory).toString()}\n        >\n          All\n        </li>\n        {Array.from(categorySet).sort().map((fieldValue: string) => {\n          // const fieldValue = prop.frontmatter.categories\n          return (\n            <li\n              key={fieldValue}\n              className=\"categories\"\n              onClick={clickHandler}\n              onKeyPress={clickHandler}\n              role=\"presentation\"\n              is-selected={(fieldValue === filteredCategory).toString()}\n            >\n              {fieldValue}\n            </li>\n          )\n        })}\n      </ol>\n    </div>\n  )\n}\nexport default Categories\n\nexport const pageQuery = graphql`\n  query Categories {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          description\n          categories\n        }\n      }\n      group(field: frontmatter___categories) {\n        edges {\n          node {\n            id\n          }\n        }\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Link, graphql, useStaticQuery, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Categories from \"../components/categories\"\n\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\n\ninterface PostNode {\n  excerpt: string\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    date: string\n    title: string\n    description: string\n    tags: string[]\n  }\n}\n\ninterface BlogIndexQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMdx: {\n    nodes: PostNode[]\n  }\n}\n\ntype CategoriesQuery = { site?: { siteMetadata?: { title?: string | null } | null } | null, allMdx: { nodes: Array<{ excerpt?: string | null, fields?: { slug?: string | null } | null, frontmatter?: { date?: any | null, title?: string | null, description?: string | null, categories?: string | null } | null }>, group: Array<{ fieldValue?: string | null, totalCount: number, edges: Array<{ node: { id: string } }> }> } };\n\nconst BlogIndex = ({ location }: PageProps) => {\n  const data: CategoriesQuery = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n        nodes {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            categories\n          }\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMdx.nodes\n\n  const [filteredCategory, setFilteredCategory] = useState('All')\n  const filteredCategoryHandler = (selected) => {\n    setFilteredCategory(selected)\n  }\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. \n        </p>\n      </Layout>\n    )\n  }\n  \n  const firstElement = posts[0];\n  const firstTitle = firstElement.frontmatter.title || firstElement.fields.slug\n\n  const filteredPosts = (filteredCategory === `All`) \n                      ? posts\n                      : posts.filter(\n                          post => (post.frontmatter.categories === filteredCategory)\n                        );\n\n  const seoTitle = (filteredCategory === `All`) \n                 ? `All posts`\n                 : `Posts in ${filteredCategory}`;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={seoTitle} />\n        {postLists(filteredPosts)}\n      <Categories data={data} onChangeCategory={filteredCategoryHandler} filteredCategory={filteredCategory} />\n    </Layout>\n  )\n}\n\nconst postLists = (posts) => {\n  const firstElement = posts[0];\n  const firstTitle = firstElement.frontmatter.title || firstElement.fields.slug\n\n  return (\n    <>\n      <div className=\"article-first\">\n        <article\n          className=\"post-list-item\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1>\n              <Link to={firstElement.fields.slug} itemProp=\"url\">\n                <span itemProp=\"headline\">{firstTitle}</span>\n              </Link>\n            </h1>\n            <small><span className=\"text-accent\">Latest Post</span> in <b>{firstElement.frontmatter.categories}</b> - {firstElement.frontmatter.date}</small>\n          </header>\n          <section>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: firstElement.frontmatter.description || firstElement.excerpt,\n              }}\n              itemProp=\"description\"\n            />\n          </section>\n        </article>\n      </div>\n      <ol className=\"other-posts\" style={{ listStyle: `none` }}>\n        <hr/>\n        {posts.slice(1).map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>in <b>{post.frontmatter.categories}</b> - {post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </>\n  )\n}\n\nexport default BlogIndex\n"],"names":["_ref","data","onChangeCategory","filteredCategory","group","allMdx","nodes","categorySet","Set","forEach","prop","add","frontmatter","categories","clickHandler","event","target","innerText","React","className","key","onClick","onKeyPress","role","toString","Array","from","sort","map","fieldValue","deckDeckGoHighlightElement","postLists","posts","firstElement","firstTitle","title","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","style","listStyle","slice","post","_data$site$siteMetada","location","useStaticQuery","siteTitle","site","siteMetadata","setFilteredCategory","useState","length","Layout","Seo","Bio","filteredPosts","filter","seoTitle","Categories","selected"],"sourceRoot":""}