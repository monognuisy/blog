{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-home-monognuisy-code-blog-content-blog-ai-bayesian-linreg-freq-mdx-7f035b5d59cef4b85f3b.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/templates/blog-post.tsx","webpack://gatsby-starter-blog/./src/components/Utterances.tsx","webpack://gatsby-starter-blog/./src/utils/blogUtils.tsx","webpack://gatsby-starter-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import GATSBY_COMPILED_MDX from \"/home/monognuisy/Code/blog/content/blog/ai-bayesian/linreg-freq.mdx\";\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport Utterances from \"../components/Utterances\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport \"katex/dist/katex.min.css\";\nimport TagBox from \"../components/tag\";\nconst BlogPostTemplate = _ref => {\n  var _data$site$siteMetada;\n  let {data, location, children} = _ref;\n  const post = data.mdx;\n  const siteTitle = ((_data$site$siteMetada = data.site.siteMetadata) === null || _data$site$siteMetada === void 0 ? void 0 : _data$site$siteMetada.title) || \"Title\";\n  const {previous, next} = data;\n  const tags = post.frontmatter.tags;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  }), React.createElement(\"article\", {\n    className: \"blog-post\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(\"p\", null, post.frontmatter.date), React.createElement(\"ul\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"flex-start\",\n      listStyle: \"none\",\n      padding: 0\n    }\n  }, tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, React.createElement(TagBox, {\n    tagName: tag\n  }))))), React.createElement(\"section\", {\n    itemProp: \"articleBody\"\n  }, children), React.createElement(\"hr\", null)), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-between\",\n      listStyle: \"none\",\n      padding: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.fields.slug,\n    rel: \"prev\"\n  }, \"\\u2190 \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.fields.slug,\n    rel: \"next\"\n  }, next.frontmatter.title, \" \\u2192\")))), React.createElement(Utterances, {\n    repo: \"monognuisy/blog\",\n    theme: \"github-light\"\n  }));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"4225206984\";\n","import React, { createRef, useLayoutEffect } from 'react';\nimport \"katex/dist/katex.min.css\"\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n  repo: string;\n  theme: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>();\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement('script');\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      'issue-term': 'pathname',\n      label: 'âœ¨ðŸ’¬ comments âœ¨',\n      crossOrigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    containerRef.current!.appendChild(utterances);\n  }, [repo]);\n\n  return <div ref={containerRef} />;\n});\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;","import * as React from \"react\"\nimport ogs from \"open-graph-scraper\"\n\nexport const LinkBox = ({ urlValue }) => {\n  return <div>{urlValue}</div>\n}\n\nexport const Code = ({ language = \"text\", children }) => {\n  return <code className={`language-` + language}>{children}</code>\n}\n\nexport const Highlight = ({ color = textHighlightBlue, children}) => {\n  return <span style={color}>{children}</span>\n}\n\nexport const textHighlightBlue = {\n  backgroundColor: `#aff0ef`,\n  padding: `3px`,\n  borderRadius: `3px`,\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["BlogPostTemplate","_ref","_data$site$siteMetada","data","location","children","post","mdx","siteTitle","site","siteMetadata","title","previous","next","tags","frontmatter","React","Layout","Seo","description","excerpt","className","itemScope","itemType","itemProp","date","style","display","flexWrap","justifyContent","listStyle","padding","map","tag","key","marginRight","TagBox","tagName","Link","to","fields","slug","rel","Utterances","repo","theme","GatsbyMDXWrapper","props","GATSBY_COMPILED_MDX","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","_ref2","value","setAttribute","current","appendChild","ref","displayName","Code","language","Highlight","_ref3","color","textHighlightBlue","backgroundColor","borderRadius","MDXContext","useMDXComponents","components","contextComponents"],"sourceRoot":""}