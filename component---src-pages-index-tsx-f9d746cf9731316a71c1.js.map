{"version":3,"file":"component---src-pages-index-tsx-f9d746cf9731316a71c1.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/categories.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import React, { FC } from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n// import { CategoriesQuery } from \"graphql-types\"\n\n// type CategoriesQuery = { site?: { siteMetadata?: { title?: string | null } | null } | null, allMarkdownRemark: { nodes: Array<{ excerpt?: string | null, fields?: { slug?: string | null } | null, frontmatter?: { date?: any | null, title?: string | null, description?: string | null, categories?: string | null } | null }>, group: Array<{ fieldValue?: string | null, totalCount: number, edges: Array<{ node: { id: string } }> }> } };\n// Catefories:FC<PageProps<CategoriesQuery>>\n\nconst Categories = ({ data, onChangeCategory, filteredCategory }) => {\n  const group = data.allMarkdownRemark.nodes\n  const categorySet:Set<string> = new Set()\n  group.forEach(prop => {\n    categorySet.add(prop.frontmatter.categories)\n  });\n\n  const clickHandler = (event) => {\n    onChangeCategory(event.target.innerText)\n  }\n  return (\n    <div className=\"category-wrapper\">\n      <hr/>\n      <h2>Categories</h2>\n      <ol className=\"category-box\">\n        <li\n          key={\"All\"}\n          className=\"categories\"\n          onClick={clickHandler}\n          onKeyPress={clickHandler}\n          role=\"presentation\"\n          is-selected={(`All` === filteredCategory).toString()}\n        >\n          All\n        </li>\n        {[...categorySet].map((fieldValue: string) => {\n          // const fieldValue = prop.frontmatter.categories\n          return (\n            <li\n              key={fieldValue}\n              className=\"categories\"\n              onClick={clickHandler}\n              onKeyPress={clickHandler}\n              role=\"presentation\"\n              is-selected={(fieldValue === filteredCategory).toString()}\n            >\n              {fieldValue}\n            </li>\n          )\n        })}\n      </ol>\n    </div>\n  )\n}\nexport default Categories\n\nexport const pageQuery = graphql`\n  query Categories {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          description\n          categories\n        }\n      }\n      group(field: frontmatter___categories) {\n        edges {\n          node {\n            id\n          }\n        }\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Link, graphql, useStaticQuery, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Categories from \"../components/categories\"\n\ninterface PostNode {\n  excerpt: string\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    date: string\n    title: string\n    description: string\n    tags: string[]\n  }\n}\n\ninterface BlogIndexQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: PostNode[]\n  }\n}\n\ntype CategoriesQuery = { site?: { siteMetadata?: { title?: string | null } | null } | null, allMarkdownRemark: { nodes: Array<{ excerpt?: string | null, fields?: { slug?: string | null } | null, frontmatter?: { date?: any | null, title?: string | null, description?: string | null, categories?: string | null } | null }>, group: Array<{ fieldValue?: string | null, totalCount: number, edges: Array<{ node: { id: string } }> }> } };\n\nconst BlogIndex = ({ location }: PageProps) => {\n  const data: CategoriesQuery = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        nodes {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            categories\n          }\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  const [filteredCategory, setFilteredCategory] = useState('All')\n  const filteredCategoryHandler = (selected) => {\n    setFilteredCategory(selected)\n  }\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. \n        </p>\n      </Layout>\n    )\n  }\n  \n  const firstElement = posts[0];\n  const firstTitle = firstElement.frontmatter.title || firstElement.fields.slug\n\n  if (filteredCategory === `All`) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n          {postLists(posts)}\n        <Categories data={data} onChangeCategory={filteredCategoryHandler} filteredCategory={filteredCategory} />\n      </Layout>\n    )\n  } \n  else {\n    const filteredPosts = posts.filter(post => (post.frontmatter.categories === filteredCategory))\n    const seoTitle = `Posts in ${filteredCategory}`\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title={seoTitle} />\n          {postLists(filteredPosts)}\n        <Categories data={data} onChangeCategory={filteredCategoryHandler} filteredCategory={filteredCategory} />\n      </Layout>\n    )\n  }\n}\n\nconst postLists = (posts) => {\n  const firstElement = posts[0];\n  const firstTitle = firstElement.frontmatter.title || firstElement.fields.slug\n\n  return (\n    <>\n      <div className=\"article-first\">\n        <article\n          className=\"post-list-item\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1>\n              <Link to={firstElement.fields.slug} itemProp=\"url\">\n                <span itemProp=\"headline\">{firstTitle}</span>\n              </Link>\n            </h1>\n            <small><span className=\"text-accent\">Latest Post</span> in <b>{firstElement.frontmatter.categories}</b> - {firstElement.frontmatter.date}</small>\n          </header>\n          <section>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: firstElement.frontmatter.description || firstElement.excerpt,\n              }}\n              itemProp=\"description\"\n            />\n          </section>\n        </article>\n      </div>\n      <ol className=\"other-posts\" style={{ listStyle: `none` }}>\n        <hr/>\n        {posts.slice(1).map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>in <b>{post.frontmatter.categories}</b> - {post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </>\n  )\n}\n\nexport default BlogIndex\n"],"names":["data","onChangeCategory","filteredCategory","group","allMarkdownRemark","nodes","categorySet","Set","forEach","prop","add","frontmatter","categories","clickHandler","event","target","innerText","React","className","key","onClick","onKeyPress","role","toString","_toConsumableArray","map","fieldValue","postLists","posts","firstElement","firstTitle","title","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","style","listStyle","slice","post","location","useStaticQuery","siteTitle","site","siteMetadata","_data$site$siteMetada","useState","setFilteredCategory","filteredCategoryHandler","selected","length","Layout","Seo","Bio","Categories","filteredPosts","filter","seoTitle"],"sourceRoot":""}