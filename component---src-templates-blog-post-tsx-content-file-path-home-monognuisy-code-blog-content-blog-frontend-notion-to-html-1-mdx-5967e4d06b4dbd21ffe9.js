"use strict";(self.webpackChunkgatsby_starter_blog=self.webpackChunkgatsby_starter_blog||[]).push([[9715],{7560:function(n,a,t){t.r(a),t.d(a,{default:function(){return g}});var s=t(1151),e=t(7294);function p(n){const a=Object.assign({h2:"h2",a:"a",span:"span",p:"p",ul:"ul",li:"li",h3:"h3",ol:"ol",strong:"strong"},(0,s.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.h2,{id:"배경",style:{position:"relative"}},e.createElement(a.a,{href:"#%EB%B0%B0%EA%B2%BD","aria-label":"배경 permalink",className:"anchor-header before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"배경"),"\n",e.createElement(a.p,null,"23-24 겨울방학 동안 웹 개발 인턴을 하면서 맡은 일 중 하나로, FAQ 페이지, Help 페이지 제작이 있었다.\n아직 질문과 답변 리스트와 각 모듈에 대한 설명이 완성되지는 않았지만,\n일단은 빠른 배포를 위하여 지금까지의 데이터를 하드코딩 하여 구현하라는 임무를 받게 되었다."),"\n",e.createElement(a.p,null,"대부분의 프론트 작업이 django 템플릿과 Alpine.js 로 되어있는 것을 보고, 최대한 Alpine 을 사용하고자 하였다.\n그래서 데이터만 담은 html 파일과, 실제 보여지는 html 파일로 나누고 동적으로 데이터를 불러오는 방식으로 구현하였다."),"\n",e.createElement(a.p,null,"하지만, 프로젝트의 유지 보수성을 위해 회사 사람들과 다음과 같은 기능을 생각하게 되었다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"markdown 지원"),"\n",e.createElement(a.li,null,"이미지 위치 지정"),"\n",e.createElement(a.li,null,"검색 기능 구현"),"\n"),"\n",e.createElement(a.p,null,"검색 기능과 같은 경우에는 간단하게 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">include</code>'}})," 등을 이용하면 되니 그리 어려울 것 같지는 않았다."),"\n",e.createElement(a.p,null,"하지만, 문제는 markdown 이었다.\n일단 showdown 패키지를 이용하여 markdown string 을 html 로 바꾼 뒤, 그것을 Alpine 의 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x-html</code>'}})," 로 보여주는 방식을 생각했다."),"\n",e.createElement(a.h3,{id:"시도-json--webpack",style:{position:"relative"}},e.createElement(a.a,{href:"#%EC%8B%9C%EB%8F%84-json--webpack","aria-label":"시도 json  webpack permalink",className:"anchor-header before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"시도: json + webpack"),"\n",e.createElement(a.p,null,"일단, 기존 코드에서의 데이터를 담는 html 파일은 사실 html이 아닌 json 으로 있어도 충분했다. 즉,"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> faqData <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">]</span>\n  <span class="token keyword">const</span> faqMethods <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">]</span>\n\n  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'alpine:init\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">\'faqAlpine\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>faqData<span class="token punctuation">,</span>\n      <span class="token operator">...</span>faqMethods<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"여기에서 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">faqData</code>'}})," 를 json 형태로 관리하는 것이 더욱 좋다고 생각했다.\n따라서, 이를 json 으로 분리하고, script 태그 내에 있는 것을 그냥 js 파일로 만들기로 하였다."),"\n",e.createElement(a.p,null,"그런 뒤, webpack 으로 해당 js 파일과 (보여지는) html 파일을 번들링하여 static 파일로 만들었다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// faq.js</span>\n\n<span class="token keyword">import</span> showdown <span class="token keyword">from</span> <span class="token string">"showdown"</span>\n<span class="token keyword">import</span> faq <span class="token keyword">from</span> <span class="token string">"./faq_data.json"</span>\n\n<span class="token keyword">const</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">showdown<span class="token punctuation">.</span>Converter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">wrapMarkdown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">markdownString</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">makeHtml</span><span class="token punctuation">(</span>markdownString<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div class="markdown content">\n      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    &lt;/div>\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> faqData <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">faqCardData</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>faq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">selectedTag</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">searchQuery</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> faqMethods <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'alpine:init\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  \n  Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">\'faqAlpine\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>faqData<span class="token punctuation">,</span>\n    <span class="token operator">...</span>faqMethods<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nwindow<span class="token punctuation">.</span>Alpine <span class="token operator">=</span> Alpine\nAlpine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\n\n<span class="token comment">// ...</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">\'faq\'</span><span class="token operator">:</span> <span class="token string">\'./&lt;some-path>/faq.js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"하지만, 여전히 html 파일에서 Alpine 을 사용하여 데이터를 불러오는 것이었기에 static의 의미가 없었다."),"\n",e.createElement(a.p,null,"게다가 아직 데이터가 완성되지 않았다는 점에서, 준-실시간으로 수정된 데이터를 반영할 수 있도록 Notion과 연동하는 것이 어떻냐는 피드백을 받았다.\n그래서, 일단은 Notion API 를 이용하여 받아온 데이터를 Alpine 으로 보여주는 방식으로 개발을 시작했다.\n(상당히… 찝찝하고… 무척 돌아가는 듯한 느낌의 방법이었지만, 일단 해보았다)"),"\n",e.createElement(a.h2,{id:"이상한-방법",style:{position:"relative"}},e.createElement(a.a,{href:"#%EC%9D%B4%EC%83%81%ED%95%9C-%EB%B0%A9%EB%B2%95","aria-label":"이상한 방법 permalink",className:"anchor-header before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"이상한 방법"),"\n",e.createElement(a.p,null,"일단, 지금까지의 로직은 다음과 같았다. 편의상, FAQ의 질문 부분을 title, 답변 부분을 content 라 하겠다."),"\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,"json 파일의 content 부분에 markdown string 형식으로 데이터를 작성한다. (하드코딩)"),"\n",e.createElement(a.li,null,"js 파일에서는 json 파일을 파싱하고, 이것으로 Alpine data 를 초기화한다."),"\n",e.createElement(a.li,null,"(Alpine을 쓰는) html 파일에서는 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x-html</code>'}})," 로 보여준다. (showdown 패키지 이용)"),"\n"),"\n",e.createElement(a.p,null,"여기서 Notion API 를 이용하면 다음과 같은 스텝이 앞에 추가된다."),"\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,"Notion API(",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">notion-to-md</code>'}}),") 를 이용하여 노션 페이지를 markdown string으로 변환한다."),"\n",e.createElement(a.li,null,"이를 content로 가지는 json 파일을 만든다. (이제는 더이상 하드코딩이 아닌!)"),"\n"),"\n",e.createElement(a.p,null,"오! 뭔가 그럴싸해 보인다. 하지만, 빼먹은 것이 하나 있다면 바로 ’",e.createElement(a.strong,null,"이미지 파일"),"’ 이다."),"\n",e.createElement(a.p,null,"Notion API 를 이용해서 페이지를 markdown 으로 변환하면, 이미지는 그저 노션의 이미지 링크로 들어간다.\n이 링크는 기본적으로 만료 시간이 있기 때문에, 이를 다운받아서 static 폴더에 저장할 필요가 있었다."),"\n",e.createElement(a.p,null,"따라서, 다음과 같은 스텝이 추가된다."),"\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,"만일 type이 image 라면, 그 링크를 이용하여 이미지를 static에 저장한다."),"\n",e.createElement(a.li,null,"그 링크는 받은 static 이미지로 설정한다."),"\n",e.createElement(a.li,null,"이를 다시 markdown string으로 변환하고… json으로 만들고… Alpine에서 부르고…"),"\n"),"\n",e.createElement(a.p,null,"뭔가 이상하지 않은가? 왜 json이 필요하지? 왜 Alpine이 필요하지?\n이쯤되면 그냥 바로 정적인 웹 페이지를 만드는 편이 더 쉬울 것 같았다!"),"\n",e.createElement(a.p,null,"2편에서 계속"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},l=t(1883),c=t(2483),r=t(4842),i=t(2825),u=t(2949),k=t(9425),m=t(5067);const d=n=>{var a;let{data:t,location:s,children:p}=n;const o=t.mdx,d=(null===(a=t.site.siteMetadata)||void 0===a?void 0:a.title)||"Title",{previous:g,next:h}=t,f=o.frontmatter.tags,E=o.frontmatter.sidenotes;return e.createElement(r.Z,{location:s,title:d},e.createElement(i.Z,{title:o.frontmatter.title,description:o.frontmatter.description||o.excerpt}),e.createElement(m.Z,null),e.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},e.createElement("header",null,e.createElement("h1",{itemProp:"headline"},o.frontmatter.title),e.createElement("p",null,o.frontmatter.date),e.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"flex-start",listStyle:"none",padding:0}},f.map((n=>e.createElement("li",{key:n,style:{marginRight:"1rem"}},e.createElement(u.Z,{tagName:n})))))),e.createElement("section",{itemProp:"articleBody"},p),e.createElement("hr",null)),e.createElement(k.Z,{sidenotesRecord:E}),e.createElement("nav",{className:"blog-post-nav"},e.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},e.createElement("li",null,g&&e.createElement(l.Link,{to:g.fields.slug,rel:"prev"},"← ",g.frontmatter.title)),e.createElement("li",null,h&&e.createElement(l.Link,{to:h.fields.slug,rel:"next"},h.frontmatter.title," →")))),e.createElement(c.Z,{repo:"monognuisy/blog",theme:"github-light"}))};function g(n){return e.createElement(d,n,e.createElement(o,n))}},2483:function(n,a,t){var s=t(7294);const e=s.memo((n=>{let{repo:a,theme:t}=n;const e=(0,s.createRef)();return(0,s.useLayoutEffect)((()=>{const n=document.createElement("script"),s={src:"https://utteranc.es/client.js",repo:a,theme:t,"issue-term":"pathname",label:"✨💬 comments ✨",crossOrigin:"anonymous",async:"true"};Object.entries(s).forEach((a=>{let[t,s]=a;n.setAttribute(t,s)})),e.current.appendChild(n)}),[a]),s.createElement("div",{ref:e,className:"utterances-wrapper"})}));e.displayName="Utterances",a.Z=e},9425:function(n,a,t){var s=t(5785),e=t(7294),p=t(1883);const o=n=>{let{pos:a,id:t,elements:s,children:o}=n;const{0:l,1:c}=(0,e.useState)(!1),{0:r,1:i}=(0,e.useState)(!1),u="#fff9db",k="#ffdc5c",m={top:0,position:"absolute",boxShadow:"rgba(0, 0, 0, 0.01) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px",padding:"10px",maxWidth:"300px",width:"100%",borderRadius:"5px",textDecoration:"none",color:"#2e353f",backgroundColor:l?"#eeeeee":"#ffffff",display:"block",transition:"0.2s"};return e.createElement(p.Link,{className:"sn-ref",style:{...m,top:a},id:"sn-ref-"+(t+1),onMouseEnter:()=>{return n=t,c((()=>!0)),void(s[n].style.backgroundColor=k);var n},onMouseLeave:()=>{return n=t,c((()=>!1)),void(r||(s[n].style.backgroundColor=u));var n},onClick:()=>{return n=t,console.log(n),s[n].style.backgroundColor=k,i((()=>!0)),setTimeout((()=>i(!1)),1e3),void setTimeout((()=>s[n].style.backgroundColor=u),1e3);var n},to:"./#sn-"+(t+1)},e.createElement("span",null,o))},l=n=>n.split("").map((n=>n.charCodeAt(0))).reduce(((n,a)=>n+(10===a||a>>7?1.8:1)),0);a.Z=n=>{let{sidenotesRecord:a}=n;const{0:t,1:p}=(0,e.useState)([]),{0:c,1:r}=(0,e.useState)([]);return(0,e.useEffect)((()=>{null==a||a.forEach((n=>{const a=n.id,t=document.querySelector("#sn-"+a),e=t.getBoundingClientRect().top+window.scrollY;p((a=>[].concat((0,s.Z)(a),[{pos:e,content:n.content}]))),r((n=>[].concat((0,s.Z)(n),[t])))}))}),[]),null==a||a.forEach(((n,a)=>{if(a<t.length-1){const s=t[a].pos,e=t[a+1].pos,p=24*Math.ceil(7.8*l(n.content)/269)-5;s+p>=e&&(t[a+1].pos=s+p+45)}})),e.createElement("div",{className:"sidenotes-wrapper"},t.map(((n,a)=>{const{pos:t,content:s}=n,p="sn-ref-"+(a+1);return e.createElement(o,{id:a,pos:t,key:p,elements:c},s)})))}},5067:function(n,a,t){var s=t(7294);a.Z=()=>s.createElement("div",{className:"toc-wrapper"})},1151:function(n,a,t){t.d(a,{ah:function(){return p}});var s=t(7294);const e=s.createContext({});function p(n){const a=s.useContext(e);return s.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-home-monognuisy-code-blog-content-blog-frontend-notion-to-html-1-mdx-5967e4d06b4dbd21ffe9.js.map