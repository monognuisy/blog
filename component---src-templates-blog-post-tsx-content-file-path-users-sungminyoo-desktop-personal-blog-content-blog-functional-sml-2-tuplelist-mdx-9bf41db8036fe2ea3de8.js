"use strict";(self.webpackChunkgatsby_starter_blog=self.webpackChunkgatsby_starter_blog||[]).push([[6186],{5519:function(e,n,a){a.r(n),a.d(n,{default:function(){return k}});var s=a(1151),t=a(7294),l=a(6917);function c(e){const n=Object.assign({h2:"h2",a:"a",span:"span",p:"p",h3:"h3",strong:"strong",h4:"h4",br:"br",ul:"ul",li:"li"},(0,s.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(n.h2,{id:"-tuple",style:{position:"relative"}},t.createElement(n.a,{href:"#-tuple","aria-label":" tuple permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🪺 Tuple"),"\n",t.createElement(n.p,null,"튜플(Tuple)은 ",t.createElement(l.DQ,{id:1},"변수를 고정된 개수만큼 모아둔 것"),"이다. 변수의 타입은 같을 필요가 없다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,"튜플의 타입은 그것의 원소의 타입을 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*</code>'}}),"로 연결한 것이다. 즉, 위의 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}}),"의 타입은 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">int * bool * string</code>'}})," 이다."),"\n",t.createElement(n.p,null,"당연히, 튜플 안에 튜플이 가능하다. 이를 nesting이라고 한다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token comment">(* \n  type of y: int * (int * string * int) * bool \n*)</span></code></pre></div>'}}),"\n",t.createElement(n.h3,{id:"accessing-elements-of-tuple",style:{position:"relative"}},t.createElement(n.a,{href:"#accessing-elements-of-tuple","aria-label":"accessing elements of tuple permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Accessing elements of tuple"),"\n",t.createElement(n.p,null,"튜플의 각 원소에 접근하는 방법은 간단하다. ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#index</code>'}}),"를 사용하면 된다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> x1 <span class="token operator">=</span> <span class="token operator">#</span><span class="token number">1</span> x         <span class="token comment">(* x1 is 10 *)</span>\n<span class="token keyword">val</span> x2 <span class="token operator">=</span> <span class="token operator">#</span><span class="token number">2</span> x         <span class="token comment">(* x2 is (false, 20) *)</span>\n<span class="token keyword">val</span> x21 <span class="token operator">=</span> <span class="token operator">#</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token operator">#</span><span class="token number">2</span> x<span class="token punctuation">)</span>   <span class="token comment">(* x21 is false *)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"index가 1부터 시작한다"),"는 점에 유의하자."),"\n",t.createElement(n.h4,{id:"parenthesis",style:{position:"relative"}},t.createElement(n.a,{href:"#parenthesis","aria-label":"parenthesis permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"parenthesis?"),"\n",t.createElement(n.p,null,"사실, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#index</code>'}}),"는 그 자체로 함수이다. 근데 sml 에서의 함수를 call 할때, 인자가 1개일 때는 굳이 소괄호를 쓰지 않아도 된다.\n하지만, 연산은 항상 ",t.createElement(n.strong,null,"left-to-right"),"로 일어나기 때문에 다음과 같은 구문은 error를 발생시킨다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token comment">(* 위의 x tuple을 그대로 사용 *)</span>\n\n<span class="token keyword">val</span> x21 <span class="token operator">=</span> <span class="token operator">#</span><span class="token number">1</span> <span class="token operator">#</span><span class="token number">2</span> x\n<span class="token comment">(* compiler see this as (#1 #2) x, and this causes type error. *)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,"즉, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#1</code>'}}),"의 인자로 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#2</code>'}}),"가 온다고 해석하는 것이다.\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#1</code>'}}),"가 인자로 받기를 기대하는(expecting) 타입은 ",t.createElement(l.DQ,{id:2},"tuple"),"인데, tuple이 아닌 웬 이상한 함수 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#2</code>'}}),"가 와서\ntype error가 발생하는 것이다. 따라서, sml 코드를 짤 때는 괄호를 잘 써서 연산의 순서를 명시해주자."),"\n",t.createElement(n.h3,{id:"function-example",style:{position:"relative"}},t.createElement(n.a,{href:"#function-example","aria-label":"function example permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Function example"),"\n",t.createElement(n.p,null,"int pair (2-tuple)을 받아서 두 원소의 합을 반환하는 함수를 써보자."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">fun</span> <span class="token function">sumPair</span> <span class="token punctuation">(</span>pr<span class="token punctuation">:</span> <span class="token class-name">int <span class="token operator">*</span> int</span><span class="token punctuation">)</span> <span class="token operator">=</span>\n  <span class="token punctuation">(</span><span class="token operator">#</span><span class="token number">1</span> pr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">#</span><span class="token number">2</span> pr<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(n.h2,{id:"-list",style:{position:"relative"}},t.createElement(n.a,{href:"#-list","aria-label":" list permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"📄 List"),"\n",t.createElement(n.p,null,"리스트(List)는 ",t.createElement(n.strong,null,"같은 타입"),"의 원소를 여러개 모아둔 것이다. 크기는 고정되어있지 않기 때문에, 늘릴 수 있다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token comment">(* type of x: int list *)</span></code></pre></div>'}}),"\n",t.createElement(n.h3,{id:"how-to-build-list",style:{position:"relative"}},t.createElement(n.a,{href:"#how-to-build-list","aria-label":"how to build list permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"How to ‘Build’ list?"),"\n",t.createElement(n.p,null,"sml에서는 임의의 타입을 alpha, beta, gamma, … 라는 이름으로 부르는데, 이를 실제 그리스 문자를 사용해서 표기하기는 어려우므로,\nalpha 대신에 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a</code>'}}),", beta 대신에 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'b</code>'}}),", … 이런 표기법을 쓴다. ",t.createElement(n.br),"\n","즉, 임의의 타입을 가지는 리스트의 타입은 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a list</code>'}})," 로 쓴다."),"\n",t.createElement(n.p,null,"그러면, 본격적으로 리스트를 만드는 방법에 대해 알아보자. 리스트는 다음과 같은 ",t.createElement(n.strong,null,"규칙"),"에 의해서 만들어진다."),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[]</code>'}}),"는 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a list</code>'}})," 타입의 빈 리스트이다."),"\n",t.createElement(n.li,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a</code>'}})," 타입의 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}}),"와, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a list</code>'}})," 타입의 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}})," 에 대하여, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x::xs</code>'}})," 는 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\'a list</code>'}})," 타입의 리스트이고, 이는 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}})," 앞에 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}}),"를 붙인 리스트이다."),"\n"),"\n",t.createElement(n.p,null,"예를들어, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1::[2,3,4] = [1,2,3,4]</code>'}})," 이다."),"\n",t.createElement(n.p,null,"여기서 드는 생각이 꽤 많아야 한다. 대표적으로는, 왜 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">::</code>'}}),"는 앞에만 붙일 수 있지? ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">append</code>'}}),"같은 것은 없나? 라는 것과,\n도대체 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">::</code>'}})," 는 뭐임? 같은 것이 있겠다."),"\n",t.createElement(n.p,null,"답을 하자면, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">append</code>'}}),"는 있지만 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">::</code>'}})," 같이 근본적으로 ‘리스트’를 ‘구성’하지는 않는다.\n그렇다면, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">::</code>'}}),"이 상당히 특이한 녀석이라는 것인데, 이는 후에 패턴 매칭을 배우면서 자세히 다뤄볼 것이다. ",t.createElement(n.br),"\n","일단은, ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">::</code>'}})," 자체가 일종의 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'a * 'a list -> 'a list</code>"}})," 같은 함수이며, right associative한 infix operator인 것만 알고 있자."),"\n",t.createElement(n.p,null,"즉, 사실 리스트 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[1,2,3,4]</code>'}})," 는 다음과 같은 방법으로 구성된 것이다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token comment">(* [1,2,3,4] is same as *)</span>\n<span class="token number">1</span> <span class="token operator">::</span> <span class="token number">2</span> <span class="token operator">::</span> <span class="token number">3</span> <span class="token operator">::</span> <span class="token number">4</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",t.createElement(n.h3,{id:"accessing-lists",style:{position:"relative"}},t.createElement(n.a,{href:"#accessing-lists","aria-label":"accessing lists permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Accessing lists"),"\n",t.createElement(n.p,null,"어떤 리스트 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}}),"에 대하여, 다음과 같은 유용한 함수들을 통해 원소에 접근할 수 있다."),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">null xs</code>'}})),"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}})," 가 비어있다면 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),"를, 아니면 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}}),"를 반환한다."),"\n"),"\n",t.createElement(n.li,null,"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hd xs</code>'}})),"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}}),"의 가장 첫번째 원소를 반환한다. 만일 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}}),"가 empty list 이면 예외를 발생시킨다."),"\n"),"\n",t.createElement(n.li,null,"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tl xs</code>'}})),"\n",t.createElement(n.p,null,t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}}),"에서 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hd xs</code>'}})," 를 제외한 리스트를 반환한다. 만일 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xs</code>'}}),"가 empty list 이면 예외를 발생시킨다."),"\n"),"\n"),"\n",t.createElement(n.p,null,"즉, 예시를 들자면 다음과 같다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> xs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n\n<span class="token keyword">val</span> isNull <span class="token operator">=</span> null xs        <span class="token comment">(* false *)</span>\n<span class="token keyword">val</span> head <span class="token operator">=</span> hd xs            <span class="token comment">(* 1 *)</span>\n<span class="token keyword">val</span> tail <span class="token operator">=</span> tl xs            <span class="token comment">(* [2,3,4] *)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,"각각의 타입은 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">null: \'a list -> bool</code>'}}),", ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">hd: 'a list -> 'a</code>"}}),", ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">tl: 'a list -> 'a list</code>"}})," 임을 쉽게 확인할 수 있을 것이다."),"\n",t.createElement(n.h3,{id:"function-example-1",style:{position:"relative"}},t.createElement(n.a,{href:"#function-example-1","aria-label":"function example 1 permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Function example"),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token comment">(* Sum all element in the list\n   ex) sumList([1,2,3,4]) = 10 *)</span>\n<span class="token keyword">fun</span> <span class="token function">sumList</span> <span class="token punctuation">(</span>xs<span class="token punctuation">:</span> <span class="token class-name">int list</span><span class="token punctuation">)</span> <span class="token operator">=</span> \n  <span class="token keyword">if</span> null xs\n  <span class="token keyword">then</span> <span class="token number">0</span>\n  <span class="token keyword">else</span> <span class="token punctuation">(</span>hd xs<span class="token punctuation">)</span> <span class="token operator">+</span> sumList<span class="token punctuation">(</span>tl xs<span class="token punctuation">)</span>\n\n\n<span class="token comment">(* Find nth element of list. \n   If fails, return 0 (bad style! but skip now)\n   ex) findNth([1,2,3,4], 2) = 3 *)</span>\n<span class="token keyword">fun</span> <span class="token function">findNth</span> <span class="token punctuation">(</span>xs<span class="token punctuation">:</span> <span class="token class-name"><span class="token variable">\'a</span> list</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token class-name">int</span><span class="token punctuation">)</span> <span class="token operator">=</span>\n  <span class="token keyword">if</span> null xs\n  <span class="token keyword">then</span> <span class="token number">0</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">=</span> <span class="token number">0</span>\n       <span class="token keyword">then</span> <span class="token punctuation">(</span>hd xs<span class="token punctuation">)</span>\n       <span class="token keyword">else</span> findNth<span class="token punctuation">(</span>tl xs<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">(* Append ys to the end of xs.\n   ex) append([1,2,3,4], [5,6,7]) = [1,2,3,4,5,6,7] *)</span>\n<span class="token keyword">fun</span> <span class="token function">append</span> <span class="token punctuation">(</span>xs<span class="token punctuation">:</span> <span class="token class-name"><span class="token variable">\'a</span> list</span><span class="token punctuation">,</span> ys<span class="token punctuation">:</span> <span class="token class-name"><span class="token variable">\'a</span> list</span><span class="token punctuation">)</span> <span class="token operator">=</span>\n  <span class="token keyword">if</span> null xs\n  <span class="token keyword">then</span> ys\n  <span class="token keyword">else</span> <span class="token punctuation">(</span>hd xs<span class="token punctuation">)</span><span class="token operator">::</span>append<span class="token punctuation">(</span>tl xs<span class="token punctuation">,</span> ys<span class="token punctuation">)</span> </code></pre></div>'}}),"\n",t.createElement(n.p,null,"참고로, 두 리스트를 append 하는 것은 다음과 같은 sml 내장 operator ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@</code>'}}),"을 이용해서도 할 수 있다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">@</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>     <span class="token comment">(* same with append([1,2,3,4], [5,6,7])\n                           which results [1,2,3,4,5,6,7] *)</span></code></pre></div>'}}),"\n",t.createElement(n.h2,{id:"-record",style:{position:"relative"}},t.createElement(n.a,{href:"#-record","aria-label":" record permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🎥 Record"),"\n",t.createElement(n.p,null,"record는 필드와 값을 가진다. 다음 예시 코드를 보자."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">"monognuisy"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">}</span>\n\n<span class="token comment">(* type of x is {name: string, id: int} *)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,"record는 마치 C의 구조체(",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">struct</code>'}}),")와도 닮았다."),"\n",t.createElement(n.h3,{id:"accessing-records",style:{position:"relative"}},t.createElement(n.a,{href:"#accessing-records","aria-label":"accessing records permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Accessing records"),"\n",t.createElement(n.p,null,"record는 필드의 이름으로 값에 접근할 수 있다. 다음과 같이 말이다."),"\n",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sml"><pre class="language-sml"><code class="language-sml"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">"monognuisy"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">}</span>\n\n<span class="token keyword">val</span> xname <span class="token operator">=</span> <span class="token operator">#</span>name x   <span class="token comment">(* xname = "monognuisy" *)</span>\n<span class="token keyword">val</span> xid <span class="token operator">=</span> <span class="token operator">#</span>id x       <span class="token comment">(* xid = 123456 *)</span></code></pre></div>'}}),"\n",t.createElement(n.p,null,"응? 이렇게 보니 마치 ‘튜플’같다. 실제로, 이 레코드는 튜플과 연관이 있다."),"\n",t.createElement(n.h3,{id:"relation-between-tuple-and-record",style:{position:"relative"}},t.createElement(n.a,{href:"#relation-between-tuple-and-record","aria-label":"relation between tuple and record permalink",className:"anchor-header before"},t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Relation between Tuple and Record"),"\n",t.createElement(n.p,null,"사실, 튜플 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(e1, e2, ..., en)</code>'}}),"은 레코드 ",t.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{1 = e1, 2 = e2, ..., n = en}</code>'}}),"를 조금 다르게 쓴 것이다.\n즉, 튜플은 ’",t.createElement(n.strong,null,"필드 이름이 숫자인 레코드"),"’ 라는 것이다."),"\n",t.createElement(n.p,null,"하지만, 필드 이름을 숫자로 하는 것은 가독성에도 나쁜 영향을 끼치고, 튜플이라는 것이 sml에서 워낙 많이 쓰이다 보니\n조금 더 간편하게(?) 쓸 수 있도록 만든 것이다. 이런 것을 ",t.createElement(n.strong,null,"Syntactic sugar")," 라고 한다."))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?t.createElement(n,e,t.createElement(c,e)):c(e)},p=a(1883),r=a(2483),u=a(4842),i=a(2825),d=a(2949),m=a(9425),g=a(5067);const h=e=>{var n;let{data:a,location:s,children:l}=e;const c=a.mdx,o=(null===(n=a.site.siteMetadata)||void 0===n?void 0:n.title)||"Title",{previous:h,next:k}=a,E=c.frontmatter.tags,y=c.frontmatter.sidenotes;return t.createElement(u.Z,{location:s,title:o},t.createElement(i.Z,{title:c.frontmatter.title,description:c.frontmatter.description||c.excerpt}),t.createElement(g.Z,null),t.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},t.createElement("header",null,t.createElement("h1",{itemProp:"headline"},c.frontmatter.title),t.createElement("p",null,c.frontmatter.date),t.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"flex-start",listStyle:"none",padding:0}},E.map((e=>t.createElement("li",{key:e,style:{marginRight:"1rem"}},t.createElement(d.Z,{tagName:e})))))),t.createElement("section",{itemProp:"articleBody"},l),t.createElement("hr",null)),t.createElement(m.Z,{sidenotesRecord:y}),t.createElement("nav",{className:"blog-post-nav"},t.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},t.createElement("li",null,h&&t.createElement(p.Link,{to:h.fields.slug,rel:"prev"},"← ",h.frontmatter.title)),t.createElement("li",null,k&&t.createElement(p.Link,{to:k.fields.slug,rel:"next"},k.frontmatter.title," →")))),t.createElement(r.Z,{repo:"monognuisy/blog",theme:"github-light"}))};function k(e){return t.createElement(h,e,t.createElement(o,e))}},2483:function(e,n,a){var s=a(7294);const t=s.memo((e=>{let{repo:n,theme:a}=e;const t=(0,s.createRef)();return(0,s.useLayoutEffect)((()=>{const e=document.createElement("script"),s={src:"https://utteranc.es/client.js",repo:n,theme:a,"issue-term":"pathname",label:"✨💬 comments ✨",crossOrigin:"anonymous",async:"true"};Object.entries(s).forEach((n=>{let[a,s]=n;e.setAttribute(a,s)})),t.current.appendChild(e)}),[n]),s.createElement("div",{ref:t,className:"utterances-wrapper"})}));t.displayName="Utterances",n.Z=t},9425:function(e,n,a){var s=a(5785),t=a(7294),l=a(1883);const c=e=>{let{pos:n,id:a,elements:s,children:c}=e;const{0:o,1:p}=(0,t.useState)(!1),{0:r,1:u}=(0,t.useState)(!1),i="#fff9db",d="#ffdc5c",m={top:0,position:"absolute",boxShadow:"rgba(0, 0, 0, 0.01) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px",padding:"10px",maxWidth:"300px",width:"100%",borderRadius:"5px",textDecoration:"none",color:"#2e353f",backgroundColor:o?"#eeeeee":"#ffffff",display:"block",transition:"0.2s"};return t.createElement(l.Link,{className:"sn-ref",style:{...m,top:n},id:"sn-ref-"+(a+1),onMouseEnter:()=>{return e=a,p((()=>!0)),void(s[e].style.backgroundColor=d);var e},onMouseLeave:()=>{return e=a,p((()=>!1)),void(r||(s[e].style.backgroundColor=i));var e},onClick:()=>{return e=a,console.log(e),s[e].style.backgroundColor=d,u((()=>!0)),setTimeout((()=>u(!1)),1e3),void setTimeout((()=>s[e].style.backgroundColor=i),1e3);var e},to:"./#sn-"+(a+1)},t.createElement("span",null,c))},o=e=>e.split("").map((e=>e.charCodeAt(0))).reduce(((e,n)=>e+(10===n||n>>7?1.8:1)),0);n.Z=e=>{let{sidenotesRecord:n}=e;const{0:a,1:l}=(0,t.useState)([]),{0:p,1:r}=(0,t.useState)([]);return(0,t.useEffect)((()=>{null==n||n.forEach((e=>{const n=e.id,a=document.querySelector("#sn-"+n),t=a.getBoundingClientRect().top+window.scrollY;l((n=>[].concat((0,s.Z)(n),[{pos:t,content:e.content}]))),r((e=>[].concat((0,s.Z)(e),[a])))}))}),[]),null==n||n.forEach(((e,n)=>{if(n<a.length-1){const s=a[n].pos,t=a[n+1].pos,l=24*Math.ceil(7.8*o(e.content)/269)-5;s+l>=t&&(a[n+1].pos=s+l+45)}})),t.createElement("div",{className:"sidenotes-wrapper"},a.map(((e,n)=>{const{pos:a,content:s}=e,l="sn-ref-"+(n+1);return t.createElement(c,{id:n,pos:a,key:l,elements:p},s)})))}},5067:function(e,n,a){var s=a(7294);n.Z=()=>s.createElement("div",{className:"toc-wrapper"})},6917:function(e,n,a){a.d(n,{DQ:function(){return o},EK:function(){return l},Uw:function(){return p},bd:function(){return r},y$:function(){return c}});var s=a(7294),t=a(1883);const l=e=>{let{language:n="text",children:a}=e;return s.createElement("code",{className:"language-"+n},a)},c=e=>{let{color:n=p,children:a}=e;return s.createElement("span",{style:n},a)},o=e=>{let{id:n,children:a}=e;const{0:l,1:c}=(0,s.useState)(!1),{0:o,1:p}=(0,s.useState)(null),{0:r,1:u}=(0,s.useState)(!1),i="#ffffff",d="#eeeeee";(0,s.useEffect)((()=>{const e="sn-ref-"+n,a=document.querySelector("#"+e);p((()=>a))}),[l]);const m={backgroundColor:l?"#ffdc5c":"#fff9db",padding:"3px",borderRadius:"3px",textDecoration:"none",color:"#2e353f",transition:"0.2s"};return s.createElement(t.Link,{to:"./#sn-ref-"+n,id:"sn-"+n,style:m,onMouseEnter:()=>{c((()=>!0)),o&&(o.style.backgroundColor=d)},onMouseLeave:()=>{c((()=>!1)),o&&!r&&(o.style.backgroundColor=i)},onClick:e=>{console.log(e),o.style.backgroundColor=d,u((()=>!0)),setTimeout((()=>u(!1)),1e3),setTimeout((()=>o.style.backgroundColor=i),1e3)}},s.createElement("span",null,a))},p={backgroundColor:"#aff0ef",padding:"3px",borderRadius:"3px"},r={backgroundColor:"#ffb8bb",padding:"3px",borderRadius:"3px"}},1151:function(e,n,a){a.d(n,{ah:function(){return l}});var s=a(7294);const t=s.createContext({});function l(e){const n=s.useContext(t);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-users-sungminyoo-desktop-personal-blog-content-blog-functional-sml-2-tuplelist-mdx-9bf41db8036fe2ea3de8.js.map