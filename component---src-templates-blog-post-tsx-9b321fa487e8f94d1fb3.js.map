{"version":3,"file":"component---src-templates-blog-post-tsx-9b321fa487e8f94d1fb3.js","mappings":"kMAUMA,EAAyCC,EAAAA,MAAW,YAAsB,IAAnBC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAC3DC,GAAeC,EAAAA,EAAAA,aAsBrB,OApBAC,EAAAA,EAAAA,kBAAgB,WACd,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAdM,gCAeNT,KAAAA,EACAC,MAAAA,EACA,aAAc,WACdS,MAAO,iBACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQN,GAAYO,SAAQ,YAAmB,IAAjBC,EAAG,KAAEC,EAAK,KAC7CZ,EAAWa,aAAaF,EAAKC,EAC/B,IAEAf,EAAaiB,QAASC,YAAYf,EACpC,GAAG,CAACL,IAEGD,EAAAA,cAAAA,MAAAA,CAAKsB,IAAKnB,GACnB,IAEAJ,EAAWwB,YAAc,aAEzB,Q,wCCiDA,EA5EyB,SAAH,GAAgC,MAA1BC,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SAC1BC,EAAOF,EAAKG,eACZC,GAAkC,QAAtB,EAAAJ,EAAKK,KAAKC,oBAAY,aAAtBC,EAAwBC,QAAK,QACvCC,EAAmBT,EAAnBS,SAAUC,EAASV,EAATU,KACZC,EAAOT,EAAKU,YAAYD,KAE9B,OACEnC,EAAAA,cAACqC,EAAAA,EAAM,CAACZ,SAAUA,EAAUO,MAAOJ,GACjC5B,EAAAA,cAACsC,EAAAA,EAAG,CACFN,MAAON,EAAKU,YAAYJ,MACxBO,YAAab,EAAKU,YAAYG,aAAeb,EAAKc,UAEpDxC,EAAAA,cAAAA,UAAAA,CACEyC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET3C,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAI4C,SAAS,YAAYlB,EAAKU,YAAYJ,OAC1ChC,EAAAA,cAAAA,IAAAA,KAAI0B,EAAKU,YAAYS,MACrB7C,EAAAA,cAAAA,KAAAA,CACE8C,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,aAChBC,UAAW,OACXC,QAAS,IAGVhB,EAAKiB,KAAI,SAAAC,GAAG,OACXrD,EAAAA,cAAAA,KAAAA,CAAIiB,IAAKoC,EAAKP,MAAO,CAAEQ,YAAa,SAClCtD,EAAAA,cAACuD,EAAAA,EAAM,CAACC,QAASH,IACd,MAIXrD,EAAAA,cAAAA,UAAAA,CACEyD,wBAAyB,CAAEC,OAAQhC,EAAKiC,MACxCf,SAAS,gBAEX5C,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAC4D,EAAAA,EAAG,QAGR5D,EAAAA,cAAAA,MAAAA,CAAKyC,UAAU,iBACbzC,EAAAA,cAAAA,KAAAA,CACE8C,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXnD,EAAAA,cAAAA,KAAAA,KACGiC,GACCjC,EAAAA,cAAC6D,EAAAA,KAAI,CAACC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QAAM,KACrChC,EAASG,YAAYJ,QAI9BhC,EAAAA,cAAAA,KAAAA,KACGkC,GACClC,EAAAA,cAAC6D,EAAAA,KAAI,CAACC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKE,YAAYJ,MAAK,SAMjChC,EAAAA,cAACD,EAAU,CAACE,KAAK,kBAAkBC,MAAM,iBAG/C,C","sources":["webpack://gatsby-starter-blog/./src/components/Utterances.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import React, { createRef, useLayoutEffect } from 'react';\nimport \"katex/dist/katex.min.css\"\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n  repo: string;\n  theme: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>();\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement('script');\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      'issue-term': 'pathname',\n      label: '‚ú®üí¨ comments ‚ú®',\n      crossOrigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    containerRef.current!.appendChild(utterances);\n  }, [repo]);\n\n  return <div ref={containerRef} />;\n});\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;","import * as React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport Utterances from \"../components/Utterances\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nimport \"katex/dist/katex.min.css\"\nimport TagBox from \"../components/tag\"\n\nconst BlogPostTemplate = ({ data, location }: any) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n  const tags = post.frontmatter.tags\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `flex-start`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            {tags.map(tag => (\n              <li key={tag} style={{ marginRight: `1rem` }}>\n                <TagBox tagName={tag} />\n              </li>\n            ))}\n          </ul>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <Utterances repo='monognuisy/blog' theme='github-light' />\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Utterances","React","repo","theme","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","data","location","post","markdownRemark","siteTitle","site","siteMetadata","_data$site$siteMetada","title","previous","next","tags","frontmatter","Layout","Seo","description","excerpt","className","itemScope","itemType","itemProp","date","style","display","flexWrap","justifyContent","listStyle","padding","map","tag","marginRight","TagBox","tagName","dangerouslySetInnerHTML","__html","html","Bio","Link","to","fields","slug","rel"],"sourceRoot":""}