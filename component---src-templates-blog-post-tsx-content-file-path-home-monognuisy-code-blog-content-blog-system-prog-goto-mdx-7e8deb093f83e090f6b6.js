"use strict";(self.webpackChunkgatsby_starter_blog=self.webpackChunkgatsby_starter_blog||[]).push([[9100],{4333:function(n,a,s){s.r(a),s.d(a,{default:function(){return m}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({h2:"h2",a:"a",span:"span",p:"p",h3:"h3",strong:"strong",br:"br",ol:"ol",li:"li"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h2,{id:"-goto",style:{position:"relative"}},t.createElement(a.a,{href:"#-goto","aria-label":" goto permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🤔 goto?"),"\n",t.createElement(a.p,null,"많은 C 입문 교재를 보면 goto를 마치 ‘절대로 쓰면 안되는 것’ 이라던지, ‘한 번이라도 쓰면 큰일이 나는 것’ 과 같이 취급한다.\n컴퓨터 과학에 지대한 영향을 끼친 에츠허르 다익스트라(Edsger W. Dijkstra) 옹께서 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 절대로 쓰지 말라고 한 것의 영향이\n크다고 생각한다."),"\n",t.createElement(a.p,null,"그렇다면, 왜 쓰지 말아야 할까?"),"\n",t.createElement(a.h3,{id:"️-굳이-쓸-필요가-없다",style:{position:"relative"}},t.createElement(a.a,{href:"#%EF%B8%8F-%EA%B5%B3%EC%9D%B4-%EC%93%B8-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4","aria-label":"️ 굳이 쓸 필요가 없다 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🤦‍♂️ 굳이 쓸 필요가 없다!"),"\n",t.createElement(a.p,null,"다음 두 코드는 완벽히 동일하게 작동한다. 어느 것이 더 깔끔한가?"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sumTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sumTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> N<span class="token punctuation">)</span> <span class="token keyword">goto</span> done<span class="token punctuation">;</span>\n\nloop<span class="token operator">:</span>\n    res <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span> <span class="token keyword">goto</span> loop<span class="token punctuation">;</span>\n\ndone<span class="token operator">:</span>\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"당연히 위의 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}})," 문이 더 간결하고 깔끔해 보인다. ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"문을 쓴 코드는 마치 어셈블리어 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="nasm"><pre class="language-nasm"><code class="language-nasm">.sumTo\n    pushq   <span class="token operator">%</span><span class="token register variable">rbx</span>\n    movl    <span class="token number">$0</span>, <span class="token operator">%</span><span class="token register variable">eax</span>\n    movl    <span class="token number">$1</span>, <span class="token operator">%</span><span class="token register variable">ebx</span>\n    cmp     <span class="token operator">%</span><span class="token register variable">rdi</span>, <span class="token operator">%</span><span class="token register variable">rbx</span>\n    jg      .DONE\n.LOOP\n    addq    <span class="token operator">%</span><span class="token register variable">rbx</span>, <span class="token operator">%</span><span class="token register variable">rax</span>\n    addq    <span class="token number">$1</span>, <span class="token operator">%</span><span class="token register variable">rbx</span>\n    cmp     <span class="token operator">%</span><span class="token register variable">rdi</span>, <span class="token operator">%</span><span class="token register variable">rbx</span>\n    jle     .LOOP\n.DONE\n    popq    <span class="token operator">%</span><span class="token register variable">rbx</span>\n    ret</code></pre></div>'}}),"\n",t.createElement(a.p,null,"(최대한 단순히 logic만 표현하였다.)"),"\n",t.createElement(a.p,null,"이렇게, 굳이 어셈블리어로 쓰기 위한 것이 아닌 이상, goto 문은 대부분 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}}),"와 같은 조건문과 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">while</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}}),"과 같은 반복문으로 ",t.createElement(a.strong,null,"대체"),"될 수 있다."),"\n",t.createElement(a.h3,{id:"-스파게티-코드",style:{position:"relative"}},t.createElement(a.a,{href:"#-%EC%8A%A4%ED%8C%8C%EA%B2%8C%ED%8B%B0-%EC%BD%94%EB%93%9C","aria-label":" 스파게티 코드 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🤮 스파게티 코드?"),"\n",t.createElement(a.p,null,"또한, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 남용하면 흔히 말하는 ",t.createElement(a.strong,null,"스파게티 코드"),"가 나올 수 있다. 만드는 법은 어렵지 않다. 다만, 해석하기 힘들 뿐."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n    <span class="token keyword">goto</span> L2<span class="token punctuation">;</span>\n\nL1<span class="token operator">:</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> end<span class="token punctuation">;</span>\n\nL3<span class="token operator">:</span>\n    z <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">goto</span> L2<span class="token punctuation">;</span>\n    y<span class="token operator">--</span><span class="token punctuation">;</span>\n\nL2<span class="token operator">:</span>\n    x <span class="token operator">+=</span> z<span class="token operator">++</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> L1<span class="token punctuation">;</span>\n\n    <span class="token keyword">goto</span> L3<span class="token punctuation">;</span>\n\nend<span class="token operator">:</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"(이게 바로 예상이 된다면… ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 마음껏 써도 좋다. 물론 혼자만.)"),"\n",t.createElement(a.p,null,"이렇게 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 쓸데없이 남발하면, 보기도 싫고, 해석하기도 힘들고, 건들기는 더욱 두려운 코드가 만들어진다. ",t.createElement(a.br),"\n","그럼, 정말로 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"는 ‘절대로 쓰면 안되는 것’일까?"),"\n",t.createElement(a.h3,{id:"-다중-반복문의-탈출",style:{position:"relative"}},t.createElement(a.a,{href:"#-%EB%8B%A4%EC%A4%91-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%98-%ED%83%88%EC%B6%9C","aria-label":" 다중 반복문의 탈출 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"👍 다중 반복문의 탈출"),"\n",t.createElement(a.p,null,"의외로, 좋은 사용처가 있다. 바로, ",t.createElement(a.strong,null,"다중 반복문"),"(nested loop)의 탈출이다. ",t.createElement(a.br),"\n","이를 위해 간단한 C-like pseudo code를 작성하면 다음과 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token comment">// do something...</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// nested for문 전체를 break 해버리고 싶음!</span>\n            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nout<span class="token operator">:</span>\n<span class="token comment">// nice break. do something...</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"오히려 이런 경우에는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 사용하지 않으면 복잡해진다. ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 안쓰면 flag 변수를 만들어서 매번 검사하고 탈출해야 하는데,\n반복문이 깊어지면 깊어질수록, 이는 크게 비효율적일 것이다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token comment">// do something...</span>\n<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// nested for문 전체를 break 해버리고 싶음!</span>\n            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 이 얼마나 비효율적인가!</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"물론, flag 변수가 많이 사용되는 것은 비트마스킹을 통해 어느정도 해결할 수 있다. 그럼에도 불구하고, 저 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}}),"문은 어쩔 수 없다."),"\n",t.createElement(a.p,null,"따라서, 다중 반복문에서는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 사용하는 것이 가독성이나 확장성 측면에서 좋다고 할 수 있다."),"\n",t.createElement(a.h3,{id:"-간단한-예외처리",style:{position:"relative"}},t.createElement(a.a,{href:"#-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC","aria-label":" 간단한 예외처리 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"🙂 간단한 예외처리"),"\n",t.createElement(a.p,null,"예외처리에서도 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"는 많이 사용된다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token comment">// in _cpu_down:</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token operator">-></span>state <span class="token operator">></span> CPUHP_TEARDOWN_CPU<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    st<span class="token operator">-></span>target <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>target<span class="token punctuation">,</span> CPUHP_TEARDOWN_CPU<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ret <span class="token operator">=</span> <span class="token function">cpuhp_kick_ap_work</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token operator">-></span>state <span class="token operator">></span> CPUHP_TEARDOWN_CPU<span class="token punctuation">)</span>\n        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n\n    st<span class="token operator">-></span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nret <span class="token operator">=</span> <span class="token function">cpuhp_down_callbacks</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> st<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&amp;&amp;</span> st<span class="token operator">-></span>state <span class="token operator">&lt;</span> prev_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token operator">-></span>state <span class="token operator">==</span> CPUHP_TEARDOWN_CPU<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">cpuhp_reset_state</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> st<span class="token punctuation">,</span> prev_state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">__cpuhp_kick_ap</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">WARN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"DEAD callback error for CPU%d"</span><span class="token punctuation">,</span> cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nout<span class="token operator">:</span>\n    <span class="token function">cpus_write_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">lockup_detector_cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">arch_smt_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">cpu_up_down_serialize_trainwrecks</span><span class="token punctuation">(</span>tasks_frozen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"이는 linux kernel의 cpu.c 코드에서 에러 처리를 위하여 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"를 사용한 모습이다. ",t.createElement(a.br),"\n","오류를 발생하는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ret</code>'}})," 변수는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_cpu_down</code>'}})," 함수 내에서 할당되고, 처리된다."),"\n",t.createElement(a.p,null,"따라서, 어떠한 ",t.createElement(a.strong,null,"함수 내에서 예외를 처리할 수 있다면"),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"문을 사용하는 것이 확실하고, 깔끔한 방법 중 하나라는 것을 확인할 수 있다."),"\n",t.createElement(a.h3,{id:"-그러면-goto는-어디로든-점프할-수-있나요",style:{position:"relative"}},t.createElement(a.a,{href:"#-%EA%B7%B8%EB%9F%AC%EB%A9%B4-goto%EB%8A%94-%EC%96%B4%EB%94%94%EB%A1%9C%EB%93%A0-%EC%A0%90%ED%94%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94","aria-label":" 그러면 goto는 어디로든 점프할 수 있나요 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"😒 그러면 goto는 어디로든 점프할 수 있나요?"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"아니다"),". 이것이 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"의 한계라고 할 수 있다. ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"는 일반적으로 한 함수 안에서만 점프할 수 있다. 즉, 다음과 같은 코드는 컴파일 오류를 발생시킨다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nL1<span class="token operator">:</span>               <span class="token comment">// useless</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">goto</span> L1<span class="token punctuation">;</span>\n    <span class="token comment">// 이 함수에는 L1이 없는데?</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"이렇게 여러 함수를 옮겨다니기 위해서는 non-local jump인 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setjmp</code>'}}),"와 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">longjmp</code>'}}),"를 사용해야만 한다."),"\n",t.createElement(a.p,null,"즉, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"로 예외를 처리하기 위해서는 꼭 그 함수 내에서 (다른 errorful한 함수를 호출하지 않고) 처리할 수 있을 정도로 단순한 예외여야 한다. ",t.createElement(a.br),"\n","(물론 nonlocal jump를 쓰더라도 메모리 해제 등등 생각해야 할 것이 많다.)"),"\n",t.createElement(a.h3,{id:"결론-및-세줄요약",style:{position:"relative"}},t.createElement(a.a,{href:"#%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EC%84%B8%EC%A4%84%EC%9A%94%EC%95%BD","aria-label":"결론 및 세줄요약 permalink",className:"anchor-header before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"결론 및 세줄요약"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"는 마냥 나쁜것은 아니다. 대부분의 상황에서는 코드를 지저분하게 만들지만, 특정한 상황에서는 오히려 코드를 보기 좋게 만들 수 있다.\n따라서, 적재적소에 쓰면서 코드를 짤 필요가 있다."),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"웬만해선 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}}),"나 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}}),"로 대체될 수 있다."),"\n",t.createElement(a.li,null,"다중 반복문이나 간단한 예외처리에서는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">goto</code>'}}),"가 더 좋을수도?"),"\n",t.createElement(a.li,null,"근데 non-local jump는 안됨."),"\n"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},c=s(1883),l=s(2483),r=s(4842),u=s(2825),i=s(2949),k=s(9425),d=s(5067);const g=n=>{var a;let{data:s,location:e,children:o}=n;const p=s.mdx,g=(null===(a=s.site.siteMetadata)||void 0===a?void 0:a.title)||"Title",{previous:m,next:h}=s,E=p.frontmatter.tags,f=p.frontmatter.sidenotes;return t.createElement(r.Z,{location:e,title:g},t.createElement(u.Z,{title:p.frontmatter.title,description:p.frontmatter.description||p.excerpt}),t.createElement(d.Z,null),t.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},t.createElement("header",null,t.createElement("h1",{itemProp:"headline"},p.frontmatter.title),t.createElement("p",null,p.frontmatter.date),t.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"flex-start",listStyle:"none",padding:0}},E.map((n=>t.createElement("li",{key:n,style:{marginRight:"1rem"}},t.createElement(i.Z,{tagName:n})))))),t.createElement("section",{itemProp:"articleBody"},o),t.createElement("hr",null)),t.createElement(k.Z,{sidenotesRecord:f}),t.createElement("nav",{className:"blog-post-nav"},t.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},t.createElement("li",null,m&&t.createElement(c.Link,{to:m.fields.slug,rel:"prev"},"← ",m.frontmatter.title)),t.createElement("li",null,h&&t.createElement(c.Link,{to:h.fields.slug,rel:"next"},h.frontmatter.title," →")))),t.createElement(l.Z,{repo:"monognuisy/blog",theme:"github-light"}))};function m(n){return t.createElement(g,n,t.createElement(p,n))}},2483:function(n,a,s){var e=s(7294);const t=e.memo((n=>{let{repo:a,theme:s}=n;const t=(0,e.createRef)();return(0,e.useLayoutEffect)((()=>{const n=document.createElement("script"),e={src:"https://utteranc.es/client.js",repo:a,theme:s,"issue-term":"pathname",label:"✨💬 comments ✨",crossOrigin:"anonymous",async:"true"};Object.entries(e).forEach((a=>{let[s,e]=a;n.setAttribute(s,e)})),t.current.appendChild(n)}),[a]),e.createElement("div",{ref:t,className:"utterances-wrapper"})}));t.displayName="Utterances",a.Z=t},9425:function(n,a,s){var e=s(5785),t=s(7294);const o=n=>{let{pos:a,id:s,elements:e,children:o}=n;const{0:p,1:c}=(0,t.useState)(!1),l={top:0,position:"absolute",boxShadow:"rgba(0, 0, 0, 0.01) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px",padding:"10px",maxWidth:"300px",width:"100%",borderRadius:"5px",backgroundColor:p?"#eeeeee":"#ffffff"};return t.createElement("div",{style:{...l,top:a},id:"sn-ref-"+(s+1),onMouseEnter:()=>{return n=s,c((()=>!0)),void(e[n].style.backgroundColor="#ffdc5c");var n},onMouseLeave:()=>{return n=s,c((()=>!1)),void(e[n].style.backgroundColor="#fff9db");var n}},t.createElement("span",null,o))},p=n=>n.split("").map((n=>n.charCodeAt(0))).reduce(((n,a)=>n+(10===a||a>>7?1.8:1)),0);a.Z=n=>{let{sidenotesRecord:a}=n;const{0:s,1:c}=(0,t.useState)([]),{0:l,1:r}=(0,t.useState)([]);return(0,t.useEffect)((()=>{null==a||a.forEach((n=>{const a=n.id,s=document.querySelector("#sn-"+a),t=s.getBoundingClientRect().top+window.scrollY;c((a=>[].concat((0,e.Z)(a),[{pos:t,content:n.content}]))),r((n=>[].concat((0,e.Z)(n),[s])))}))}),[]),null==a||a.forEach(((n,a)=>{if(a<s.length-1){const e=s[a].pos,t=s[a+1].pos,o=24*Math.ceil(7.8*p(n.content)/269)-5;console.log(o),console.log(t),e+o>=t&&(s[a+1].pos=e+o+45)}})),t.createElement("div",{className:"sidenotes-wrapper"},s.map(((n,a)=>{const{pos:s,content:e}=n,p="sn-ref-"+(a+1);return t.createElement(o,{id:a,pos:s,key:p,elements:l},e)})))}},5067:function(n,a,s){var e=s(7294);a.Z=()=>e.createElement("div",{className:"toc-wrapper"})},1151:function(n,a,s){s.d(a,{ah:function(){return o}});var e=s(7294);const t=e.createContext({});function o(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-home-monognuisy-code-blog-content-blog-system-prog-goto-mdx-7e8deb093f83e090f6b6.js.map