{"version":3,"file":"component---src-pages-index-tsx-72e7af32c8fa33ebac2f.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/logo_trans.webp\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p style={{\n          verticalAlign: `middle`,\n        }}>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql, useStaticQuery, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ninterface PostNode {\n  excerpt: string\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    date: string\n    title: string\n    description: string\n    tags: string[]\n  }\n}\n\ninterface BlogIndexQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: PostNode[]\n  }\n}\n\nconst BlogIndex = ({ location }: PageProps) => {\n  const data: BlogIndexQueryData = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        nodes {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. \n        </p>\n      </Layout>\n    )\n  }\n  \n  const firstElement = posts[0];\n  const firstTitle = firstElement.frontmatter.title || firstElement.fields.slug\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <div className=\"article-first\">\n        <article\n          className=\"post-list-item\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1>\n              <Link to={firstElement.fields.slug} itemProp=\"url\">\n                <span itemProp=\"headline\">{firstTitle}</span>\n              </Link>\n            </h1>\n            <small><span className=\"text-accent\">Latest Post</span> - {firstElement.frontmatter.date}</small>\n          </header>\n          <section>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: firstElement.frontmatter.description || firstElement.excerpt,\n              }}\n              itemProp=\"description\"\n            />\n          </section>\n        </article>\n      </div>\n      <ol style={{ listStyle: `none` }}>\n        <hr/>\n        {posts.slice(1).map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <Bio />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","_data$site$siteMetada2","social","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","style","verticalAlign","summary","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","Layout","Seo","Bio","firstElement","firstTitle","frontmatter","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","listStyle","slice","map","post","key"],"sourceRoot":""}