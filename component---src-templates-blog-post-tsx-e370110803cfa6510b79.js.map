{"version":3,"file":"component---src-templates-blog-post-tsx-e370110803cfa6510b79.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/components/Utterances.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/logo_trans.webp\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p style={{\n          verticalAlign: `middle`,\n        }}>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React, { createRef, useLayoutEffect } from 'react';\nimport \"katex/dist/katex.min.css\"\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n  repo: string;\n  theme: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>();\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement('script');\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      'issue-term': 'pathname',\n      label: '‚ú®üí¨ comments ‚ú®',\n      crossOrigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    containerRef.current!.appendChild(utterances);\n  }, [repo]);\n\n  return <div ref={containerRef} />;\n});\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;","import * as React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport Utterances from \"../components/Utterances\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nimport \"katex/dist/katex.min.css\"\nimport TagBox from \"../components/tag\"\n\nconst BlogPostTemplate = ({ data, location }: any) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n  const tags = post.frontmatter.tags\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `flex-start`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            {tags.map(tag => (\n              <li key={tag} style={{ marginRight: `1rem` }}>\n                <TagBox tagName={tag} />\n              </li>\n            ))}\n          </ul>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <Utterances repo='monognuisy/blog' theme='github-light' />\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","_data$site$siteMetada2","social","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","style","verticalAlign","summary","Utterances","repo","theme","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","location","post","markdownRemark","siteTitle","title","previous","next","tags","frontmatter","Layout","Seo","description","excerpt","itemScope","itemType","itemProp","date","display","flexWrap","justifyContent","listStyle","padding","map","tag","marginRight","TagBox","tagName","dangerouslySetInnerHTML","__html","html","Bio","Link","to","fields","slug","rel"],"sourceRoot":""}