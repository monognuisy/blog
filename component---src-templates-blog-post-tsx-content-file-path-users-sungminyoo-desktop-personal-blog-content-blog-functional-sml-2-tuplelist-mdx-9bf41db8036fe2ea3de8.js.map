{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-users-sungminyoo-desktop-personal-blog-content-blog-functional-sml-2-tuplelist-mdx-9bf41db8036fe2ea3de8.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./content/blog/functional/sml2-tuplelist.mdx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx","webpack://gatsby-starter-blog/./src/components/Utterances.tsx","webpack://gatsby-starter-blog/./src/components/sidenotes.tsx","webpack://gatsby-starter-blog/./src/components/toc.tsx","webpack://gatsby-starter-blog/./src/utils/blogUtils.tsx","webpack://gatsby-starter-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Sidenote} from \"../../../src/utils/blogUtils.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    h4: \"h4\",\n    br: \"br\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"-tuple\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-tuple\",\n    \"aria-label\": \" tuple permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"🪺 Tuple\"), \"\\n\", React.createElement(_components.p, null, \"튜플(Tuple)은 \", React.createElement(Sidenote, {\n    id: 1\n  }, \"변수를 고정된 개수만큼 모아둔 것\"), \"이다. 변수의 타입은 같을 필요가 없다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"튜플의 타입은 그것의 원소의 타입을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">*</code>\"\n    }\n  }), \"로 연결한 것이다. 즉, 위의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \"의 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">int * bool * string</code>\"\n    }\n  }), \" 이다.\"), \"\\n\", React.createElement(_components.p, null, \"당연히, 튜플 안에 튜플이 가능하다. 이를 nesting이라고 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">(* \\n  type of y: int * (int * string * int) * bool \\n*)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"accessing-elements-of-tuple\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#accessing-elements-of-tuple\",\n    \"aria-label\": \"accessing elements of tuple permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Accessing elements of tuple\"), \"\\n\", React.createElement(_components.p, null, \"튜플의 각 원소에 접근하는 방법은 간단하다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#index</code>\"\n    }\n  }), \"를 사용하면 된다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">val</span> x1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">1</span> x         <span class=\\\"token comment\\\">(* x1 is 10 *)</span>\\n<span class=\\\"token keyword\\\">val</span> x2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">2</span> x         <span class=\\\"token comment\\\">(* x2 is (false, 20) *)</span>\\n<span class=\\\"token keyword\\\">val</span> x21 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">2</span> x<span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\">(* x21 is false *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"index가 1부터 시작한다\"), \"는 점에 유의하자.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"parenthesis\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#parenthesis\",\n    \"aria-label\": \"parenthesis permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"parenthesis?\"), \"\\n\", React.createElement(_components.p, null, \"사실, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#index</code>\"\n    }\n  }), \"는 그 자체로 함수이다. 근데 sml 에서의 함수를 call 할때, 인자가 1개일 때는 굳이 소괄호를 쓰지 않아도 된다.\\n하지만, 연산은 항상 \", React.createElement(_components.strong, null, \"left-to-right\"), \"로 일어나기 때문에 다음과 같은 구문은 error를 발생시킨다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token comment\\\">(* 위의 x tuple을 그대로 사용 *)</span>\\n\\n<span class=\\\"token keyword\\\">val</span> x21 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">2</span> x\\n<span class=\\\"token comment\\\">(* compiler see this as (#1 #2) x, and this causes type error. *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"즉, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#1</code>\"\n    }\n  }), \"의 인자로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#2</code>\"\n    }\n  }), \"가 온다고 해석하는 것이다.\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#1</code>\"\n    }\n  }), \"가 인자로 받기를 기대하는(expecting) 타입은 \", React.createElement(Sidenote, {\n    id: 2\n  }, \"tuple\"), \"인데, tuple이 아닌 웬 이상한 함수 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#2</code>\"\n    }\n  }), \"가 와서\\ntype error가 발생하는 것이다. 따라서, sml 코드를 짤 때는 괄호를 잘 써서 연산의 순서를 명시해주자.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-example\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-example\",\n    \"aria-label\": \"function example permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function example\"), \"\\n\", React.createElement(_components.p, null, \"int pair (2-tuple)을 받아서 두 원소의 합을 반환하는 함수를 써보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sumPair</span> <span class=\\\"token punctuation\\\">(</span>pr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">int <span class=\\\"token operator\\\">*</span> int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">1</span> pr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">#</span><span class=\\\"token number\\\">2</span> pr<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"-list\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-list\",\n    \"aria-label\": \" list permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"📄 List\"), \"\\n\", React.createElement(_components.p, null, \"리스트(List)는 \", React.createElement(_components.strong, null, \"같은 타입\"), \"의 원소를 여러개 모아둔 것이다. 크기는 고정되어있지 않기 때문에, 늘릴 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\">(* type of x: int list *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-to-build-list\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-to-build-list\",\n    \"aria-label\": \"how to build list permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How to ‘Build’ list?\"), \"\\n\", React.createElement(_components.p, null, \"sml에서는 임의의 타입을 alpha, beta, gamma, … 라는 이름으로 부르는데, 이를 실제 그리스 문자를 사용해서 표기하기는 어려우므로,\\nalpha 대신에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a</code>\"\n    }\n  }), \", beta 대신에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'b</code>\"\n    }\n  }), \", … 이런 표기법을 쓴다. \", React.createElement(_components.br), \"\\n\", \"즉, 임의의 타입을 가지는 리스트의 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a list</code>\"\n    }\n  }), \" 로 쓴다.\"), \"\\n\", React.createElement(_components.p, null, \"그러면, 본격적으로 리스트를 만드는 방법에 대해 알아보자. 리스트는 다음과 같은 \", React.createElement(_components.strong, null, \"규칙\"), \"에 의해서 만들어진다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[]</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a list</code>\"\n    }\n  }), \" 타입의 빈 리스트이다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a</code>\"\n    }\n  }), \" 타입의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \"와, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a list</code>\"\n    }\n  }), \" 타입의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \" 에 대하여, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x::xs</code>\"\n    }\n  }), \" 는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a list</code>\"\n    }\n  }), \" 타입의 리스트이고, 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \" 앞에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \"를 붙인 리스트이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"예를들어, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1::[2,3,4] = [1,2,3,4]</code>\"\n    }\n  }), \" 이다.\"), \"\\n\", React.createElement(_components.p, null, \"여기서 드는 생각이 꽤 많아야 한다. 대표적으로는, 왜 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"는 앞에만 붙일 수 있지? \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">append</code>\"\n    }\n  }), \"같은 것은 없나? 라는 것과,\\n도대체 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \" 는 뭐임? 같은 것이 있겠다.\"), \"\\n\", React.createElement(_components.p, null, \"답을 하자면, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">append</code>\"\n    }\n  }), \"는 있지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \" 같이 근본적으로 ‘리스트’를 ‘구성’하지는 않는다.\\n그렇다면, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"이 상당히 특이한 녀석이라는 것인데, 이는 후에 패턴 매칭을 배우면서 자세히 다뤄볼 것이다. \", React.createElement(_components.br), \"\\n\", \"일단은, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \" 자체가 일종의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">'a * 'a list -> 'a list</code>\"\n    }\n  }), \" 같은 함수이며, right associative한 infix operator인 것만 알고 있자.\"), \"\\n\", React.createElement(_components.p, null, \"즉, 사실 리스트 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[1,2,3,4]</code>\"\n    }\n  }), \" 는 다음과 같은 방법으로 구성된 것이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token comment\\\">(* [1,2,3,4] is same as *)</span>\\n<span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"accessing-lists\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#accessing-lists\",\n    \"aria-label\": \"accessing lists permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Accessing lists\"), \"\\n\", React.createElement(_components.p, null, \"어떤 리스트 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \"에 대하여, 다음과 같은 유용한 함수들을 통해 원소에 접근할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null xs</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \" 가 비어있다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">true</code>\"\n    }\n  }), \"를, 아니면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">false</code>\"\n    }\n  }), \"를 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hd xs</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \"의 가장 첫번째 원소를 반환한다. 만일 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \"가 empty list 이면 예외를 발생시킨다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tl xs</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \"에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hd xs</code>\"\n    }\n  }), \" 를 제외한 리스트를 반환한다. 만일 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">xs</code>\"\n    }\n  }), \"가 empty list 이면 예외를 발생시킨다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"즉, 예시를 들자면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> xs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">val</span> isNull <span class=\\\"token operator\\\">=</span> null xs        <span class=\\\"token comment\\\">(* false *)</span>\\n<span class=\\\"token keyword\\\">val</span> head <span class=\\\"token operator\\\">=</span> hd xs            <span class=\\\"token comment\\\">(* 1 *)</span>\\n<span class=\\\"token keyword\\\">val</span> tail <span class=\\\"token operator\\\">=</span> tl xs            <span class=\\\"token comment\\\">(* [2,3,4] *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"각각의 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null: 'a list -> bool</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hd: 'a list -> 'a</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tl: 'a list -> 'a list</code>\"\n    }\n  }), \" 임을 쉽게 확인할 수 있을 것이다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-example-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-example-1\",\n    \"aria-label\": \"function example 1 permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function example\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token comment\\\">(* Sum all element in the list\\n   ex) sumList([1,2,3,4]) = 10 *)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sumList</span> <span class=\\\"token punctuation\\\">(</span>xs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">int list</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> \\n  <span class=\\\"token keyword\\\">if</span> null xs\\n  <span class=\\\"token keyword\\\">then</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">(</span>hd xs<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> sumList<span class=\\\"token punctuation\\\">(</span>tl xs<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token comment\\\">(* Find nth element of list. \\n   If fails, return 0 (bad style! but skip now)\\n   ex) findNth([1,2,3,4], 2) = 3 *)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">findNth</span> <span class=\\\"token punctuation\\\">(</span>xs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\"><span class=\\\"token variable\\\">'a</span> list</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">if</span> null xs\\n  <span class=\\\"token keyword\\\">then</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n       <span class=\\\"token keyword\\\">then</span> <span class=\\\"token punctuation\\\">(</span>hd xs<span class=\\\"token punctuation\\\">)</span>\\n       <span class=\\\"token keyword\\\">else</span> findNth<span class=\\\"token punctuation\\\">(</span>tl xs<span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token comment\\\">(* Append ys to the end of xs.\\n   ex) append([1,2,3,4], [5,6,7]) = [1,2,3,4,5,6,7] *)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">append</span> <span class=\\\"token punctuation\\\">(</span>xs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\"><span class=\\\"token variable\\\">'a</span> list</span><span class=\\\"token punctuation\\\">,</span> ys<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\"><span class=\\\"token variable\\\">'a</span> list</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">if</span> null xs\\n  <span class=\\\"token keyword\\\">then</span> ys\\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">(</span>hd xs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">::</span>append<span class=\\\"token punctuation\\\">(</span>tl xs<span class=\\\"token punctuation\\\">,</span> ys<span class=\\\"token punctuation\\\">)</span> </code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"참고로, 두 리스트를 append 하는 것은 다음과 같은 sml 내장 operator \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@</code>\"\n    }\n  }), \"을 이용해서도 할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">@</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span>     <span class=\\\"token comment\\\">(* same with append([1,2,3,4], [5,6,7])\\n                           which results [1,2,3,4,5,6,7] *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"-record\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-record\",\n    \"aria-label\": \" record permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"🎥 Record\"), \"\\n\", React.createElement(_components.p, null, \"record는 필드와 값을 가진다. 다음 예시 코드를 보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"monognuisy\\\"</span><span class=\\\"token punctuation\\\">,</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">123456</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">(* type of x is {name: string, id: int} *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"record는 마치 C의 구조체(\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">struct</code>\"\n    }\n  }), \")와도 닮았다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"accessing-records\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#accessing-records\",\n    \"aria-label\": \"accessing records permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Accessing records\"), \"\\n\", React.createElement(_components.p, null, \"record는 필드의 이름으로 값에 접근할 수 있다. 다음과 같이 말이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sml\\\"><pre class=\\\"language-sml\\\"><code class=\\\"language-sml\\\"><span class=\\\"token keyword\\\">val</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"monognuisy\\\"</span><span class=\\\"token punctuation\\\">,</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">123456</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> xname <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span>name x   <span class=\\\"token comment\\\">(* xname = \\\"monognuisy\\\" *)</span>\\n<span class=\\\"token keyword\\\">val</span> xid <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">#</span>id x       <span class=\\\"token comment\\\">(* xid = 123456 *)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"응? 이렇게 보니 마치 ‘튜플’같다. 실제로, 이 레코드는 튜플과 연관이 있다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"relation-between-tuple-and-record\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#relation-between-tuple-and-record\",\n    \"aria-label\": \"relation between tuple and record permalink\",\n    className: \"anchor-header before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Relation between Tuple and Record\"), \"\\n\", React.createElement(_components.p, null, \"사실, 튜플 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(e1, e2, ..., en)</code>\"\n    }\n  }), \"은 레코드 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{1 = e1, 2 = e2, ..., n = en}</code>\"\n    }\n  }), \"를 조금 다르게 쓴 것이다.\\n즉, 튜플은 ’\", React.createElement(_components.strong, null, \"필드 이름이 숫자인 레코드\"), \"’ 라는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만, 필드 이름을 숫자로 하는 것은 가독성에도 나쁜 영향을 끼치고, 튜플이라는 것이 sml에서 워낙 많이 쓰이다 보니\\n조금 더 간편하게(?) 쓸 수 있도록 만든 것이다. 이런 것을 \", React.createElement(_components.strong, null, \"Syntactic sugar\"), \" 라고 한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/sungminyoo/Desktop/Personal/blog/content/blog/functional/sml2-tuplelist.mdx\";\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport Utterances from \"../components/Utterances\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport \"katex/dist/katex.min.css\";\nimport TagBox from \"../components/tag\";\nimport Sidenotes from \"../components/sidenotes\";\nimport Toc from \"../components/toc\";\nconst BlogPostTemplate = _ref => {\n  var _data$site$siteMetada;\n  let {data, location, children} = _ref;\n  const post = data.mdx;\n  const siteTitle = ((_data$site$siteMetada = data.site.siteMetadata) === null || _data$site$siteMetada === void 0 ? void 0 : _data$site$siteMetada.title) || \"Title\";\n  const {previous, next} = data;\n  const tags = post.frontmatter.tags;\n  const sidenotes = post.frontmatter.sidenotes;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  }), React.createElement(Toc, null), React.createElement(\"article\", {\n    className: \"blog-post\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(\"p\", null, post.frontmatter.date), React.createElement(\"ul\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"flex-start\",\n      listStyle: \"none\",\n      padding: 0\n    }\n  }, tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, React.createElement(TagBox, {\n    tagName: tag\n  }))))), React.createElement(\"section\", {\n    itemProp: \"articleBody\"\n  }, children), React.createElement(\"hr\", null)), React.createElement(Sidenotes, {\n    sidenotesRecord: sidenotes\n  }), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-between\",\n      listStyle: \"none\",\n      padding: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.fields.slug,\n    rel: \"prev\"\n  }, \"\\u2190 \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.fields.slug,\n    rel: \"next\"\n  }, next.frontmatter.title, \" \\u2192\")))), React.createElement(Utterances, {\n    repo: \"monognuisy/blog\",\n    theme: \"github-light\"\n  }));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"698757121\";\n","import React, { createRef, useLayoutEffect } from 'react';\nimport \"katex/dist/katex.min.css\"\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n  repo: string;\n  theme: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>();\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement('script');\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      'issue-term': 'pathname',\n      label: '✨💬 comments ✨',\n      crossOrigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    containerRef.current!.appendChild(utterances);\n  }, [repo]);\n\n  return <div ref={containerRef} className='utterances-wrapper' />;\n});\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;","import React, { FC, useEffect, useState } from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\ntype sidenotesType = {\n  id: number,\n  content: string\n}\n\ntype sidenotesRecType = {\n  sidenotesRecord: sidenotesType[]\n}\n\ntype positionType = {\n  pos: number,\n  content: string,\n}\n\nconst Sidenotes = ({ sidenotesRecord }: sidenotesRecType) => {  \n  const [positions, setPositions] = useState<positionType[]>([]);\n  const [docElement, setDocElement] = useState<Element[]>([]);\n\n  useEffect(() => {\n    // fetch location of element and set y of sidenote same.\n    sidenotesRecord?.forEach(e => {\n      const key = e.id;\n      const ele = document.querySelector(`#sn-${key}`);\n      const pos = ele.getBoundingClientRect();\n      const res = pos.top + window.scrollY;\n\n      setPositions((positions) => {\n        return ([...positions, {\n          pos: res,\n          content: e.content,\n      }])});\n\n      setDocElement((elements) => {\n        return ([...elements, ele])\n      });\n\n    })\n  }, [])\n\n  sidenotesRecord?.forEach((e, index) => {\n    // consider current and next sidenote simultaneously.\n    if (index < positions.length - 1) {\n      const currpos = positions[index].pos;\n      const nextpos = positions[index + 1].pos;\n\n      // expect the height of current sidenotes.\n      const currheight = (Math.ceil(getByte(e.content) * 7.8 / 269))*(24) - 5;\n\n      // if overlapped, adjust position of next element.\n      if (currpos + currheight >= nextpos) {\n        positions[index + 1].pos = currpos + currheight + 45;\n      }\n    }\n  })\n\n\n  return (\n    <div className=\"sidenotes-wrapper\">\n      {positions.map((e, index) => {\n        const { pos, content }: positionType = e;\n        const id = `sn-ref-${index + 1}`;\n\n        return (\n          <Note id={index} pos={pos} key={id} elements={docElement}>\n            {content}\n          </Note>\n        )\n      })}\n    </div>\n  )\n}\n\nconst Note = ({ pos, id, elements, children }) => {\n  const [onhover, setOnhover] = useState<boolean>(false);\n  const [waiter, setWaiter] = useState<boolean>(false);\n\n  const primaryHColor = `#fff9db`;\n  const dimmedHColor = `#ffdc5c`;\n\n  const mouseEnter = (i) => {\n    setOnhover(() => true);\n    \n    elements[i].style.backgroundColor = dimmedHColor\n  }\n\n  const mouseLeave = (i) => {\n    setOnhover(() => false);\n\n    if (!waiter) {\n      elements[i].style.backgroundColor = primaryHColor\n    }\n  }\n\n  const mouseClick = (i) => {\n    console.log(i);\n\n    elements[i].style.backgroundColor = dimmedHColor\n    setWaiter(() => true);\n\n    setTimeout(() => setWaiter(false), 1000);\n    setTimeout(() => (elements[i].style.backgroundColor = primaryHColor), 1000);\n  }\n\n\n  const sidenoteStyle = {\n    top: 0,\n    position: `absolute`, \n    boxShadow: `rgba(0, 0, 0, 0.01) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px`,\n    padding: `10px`,\n    maxWidth: `300px`,\n    width: `100%`,\n    borderRadius: `5px`,  \n    textDecoration: `none`,\n    color: `#2e353f`,\n    backgroundColor: onhover ? `#eeeeee` : `#ffffff`,\n    display: `block`,\n    transition: `0.2s`,\n  }\n\n  return (\n    <Link \n      className=\"sn-ref\"\n      style={{\n        ...sidenoteStyle,\n        top: pos,\n      }} \n      id={`sn-ref-${id + 1}`}\n      onMouseEnter={() => mouseEnter(id)}\n      onMouseLeave={() => mouseLeave(id)}\n      onClick={() => mouseClick(id)}\n      to={`./#sn-${id + 1}`}>\n      <span>\n        {children}\n      </span>\n    </Link>\n  )\n}\n\nconst getByte = (str) => {\n  return str\n    .split('') \n    .map(s => s.charCodeAt(0))\n    .reduce((prev, c) => (prev + ((c === 10) ? 1.8 : ((c >> 7) ? 1.8 : 1))), 0);\n}\n\nexport default Sidenotes","import React, { FC } from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n\nconst Toc = () => {\n  return <div className=\"toc-wrapper\"></div>\n}\n\nexport default Toc","import * as React from \"react\"\nimport ogs from \"open-graph-scraper\"\n\nimport { useEffect, useState } from \"react\"\nimport { Link } from \"gatsby\"\n\nexport const LinkBox = ({ urlValue }) => {\n  return <div>{urlValue}</div>\n}\n\nexport const Code = ({ language = \"text\", children }) => {\n  return <code className={`language-` + language}>{children}</code>\n}\n\nexport const Highlight = ({ color = textHighlightBlue, children}) => {\n  return <span style={color}>{children}</span>\n}\n\nexport const Sidenote = ({ id, children }) => {\n  const [onhover, setOnhover] = useState(false);\n  const [sideElement, setSideElement] = useState(null);\n  const [waiter, setWaiter] = useState(false);\n\n  const primaryColor = `#ffffff`;\n  const dimmedColor = `#eeeeee`;\n\n  useEffect(() => {\n    const sidekey = `sn-ref-${id}`\n    const docElement = document.querySelector(`#${sidekey}`)\n\n    setSideElement(() => docElement)\n  }, [onhover])\n\n  const mouseEnter = () => {\n    setOnhover(() => true);\n\n    if (sideElement) sideElement.style.backgroundColor = dimmedColor\n  }\n\n  const mouseLeave = () => {\n    setOnhover(() => false);\n\n    if (sideElement && !waiter) \n      sideElement.style.backgroundColor = primaryColor\n  }\n\n  \n  const mouseClick = (i) => {\n    console.log(i);\n\n    sideElement.style.backgroundColor = dimmedColor\n    setWaiter(() => true);\n\n    setTimeout(() => setWaiter(false), 1000);\n    setTimeout(() => (sideElement.style.backgroundColor = primaryColor), 1000);\n  }\n\n  const sidenoteStyle = {\n    backgroundColor: onhover ? `#ffdc5c` :`#fff9db`,\n    padding: `3px`,\n    borderRadius: `3px`,\n    textDecoration: `none`,\n    color: `#2e353f`,\n    transition: `0.2s`,\n  }\n  \n\n  return (\n    <Link \n      to={`./#sn-ref-${id}`}\n      id={`sn-${id}`} \n      style={sidenoteStyle} \n      onMouseEnter={mouseEnter} \n      onMouseLeave={mouseLeave}\n      onClick={mouseClick}\n    >\n      <span >\n        {children}\n      </span>\n    </Link>\n  )\n}\n\nexport const textHighlightBlue = {\n  backgroundColor: `#aff0ef`,\n  padding: `3px`,\n  borderRadius: `3px`,\n}\n\nexport const textHighlightRed = {\n  backgroundColor: `#ffb8bb`,\n  padding: `3px`,\n  borderRadius: `3px`,\n}\n\n\nexport const textHighlightYellow = {\n  backgroundColor: `#fff9db`,\n  padding: `3px`,\n  borderRadius: `3px`,\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","p","h3","strong","h4","br","ul","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","Sidenote","wrapper","MDXLayout","BlogPostTemplate","_ref","_data$site$siteMetada","data","location","children","post","mdx","siteTitle","site","siteMetadata","title","previous","next","tags","frontmatter","sidenotes","Layout","Seo","description","excerpt","Toc","itemScope","itemType","itemProp","date","display","flexWrap","justifyContent","listStyle","padding","map","tag","key","marginRight","TagBox","tagName","Sidenotes","sidenotesRecord","Link","to","fields","slug","rel","Utterances","repo","theme","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","entries","forEach","_ref2","value","setAttribute","current","appendChild","ref","displayName","Note","pos","elements","onhover","setOnhover","useState","waiter","setWaiter","primaryHColor","dimmedHColor","sidenoteStyle","top","boxShadow","maxWidth","width","borderRadius","textDecoration","color","backgroundColor","transition","onMouseEnter","mouseEnter","i","onMouseLeave","mouseLeave","onClick","mouseClick","console","log","setTimeout","getByte","str","split","s","charCodeAt","reduce","prev","c","positions","setPositions","docElement","setDocElement","useEffect","e","ele","querySelector","res","getBoundingClientRect","window","scrollY","concat","_toConsumableArray","content","index","length","currpos","nextpos","currheight","Math","ceil","Code","language","Highlight","_ref3","textHighlightBlue","_ref4","sideElement","setSideElement","primaryColor","dimmedColor","sidekey","textHighlightRed","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}