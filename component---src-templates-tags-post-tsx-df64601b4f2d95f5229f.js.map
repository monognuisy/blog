{"version":3,"file":"component---src-templates-tags-post-tsx-df64601b4f2d95f5229f.js","mappings":"8JA8EA,UAzEa,SAAH,GAA8B,IAAxBA,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WACTC,EAAeD,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZH,EAAG,IAEpB,OACEK,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,kBACbD,EAAAA,cAAAA,KAAAA,KAAKD,GACLC,EAAAA,cAAAA,KAAAA,CAAIE,MAAO,CAAEC,UAAW,SACrBN,EAAMO,KAAI,YAAc,IAAXC,EAAI,EAAJA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MAER,OADAE,QAAQC,IAAIN,GAEVL,EAAAA,cAAAA,KAAAA,CAAIY,IAAKN,GACPN,EAAAA,cAAAA,UAAAA,CACEC,UAAU,iBACVY,WAAS,EACTC,SAAS,6BAETd,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACe,EAAAA,KAAI,CAACC,GAAIV,EAAMW,SAAS,OACvBjB,EAAAA,cAAAA,OAAAA,CAAMiB,SAAS,YAAYT,KAG/BR,EAAAA,cAAAA,QAAAA,KAAQK,EAAKI,YAAYS,OAE3BlB,EAAAA,cAAAA,UAAAA,KACEA,EAAAA,cAAAA,IAAAA,CACEmB,wBAAyB,CACvBC,OAAQf,EAAKI,YAAYY,aAAehB,EAAKiB,SAE/CL,SAAS,kBAMrB,KAMFjB,EAAAA,cAACe,EAAAA,KAAI,CAACC,GAAG,SAAO,cAGtB,C","sources":["webpack://gatsby-starter-blog/./src/templates/tags-post.tsx"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <div className=\"global-wrapper\">\n      <h1>{tagHeader}</h1>\n      <ol style={{ listStyle: `none`}}>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          console.log(node)\n          return (\n            <li key={slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{node.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: node.frontmatter.description || node.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">â†‘ All tags</Link>\n    </div>\n  )\n}\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\nexport default Tags\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","React","className","style","listStyle","map","node","slug","fields","title","frontmatter","console","log","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}